
<h3>Movies</h3>

@code {

}
@page "/Movies"

@inject HttpClient client

@using Newtonsoft.Json
@using Data


<div class="container-fluid">

    <div class="row justify-content-center" style="margin-bottom:50px">
        <h3 class="text-center">Check Out Your Favorite Movie!</h3>
    </div>

    <div class="row" style="margin:25px;">
        <section style="margin-bottom: 10px">
            <input type="text" class="form-control" placeholder="Search by product name" />
            <button onclick="GetMovies">Search</button>
        </section>
<hr />
        @if (Movie != null)
        {
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>Id</th>
                        <th>Title</th>
                        <th>Overview</th>
                        <th>Release Date</th>
                        <th>Vote Average</th>
                        <th>Vote Count</th>
                        <th>Image</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var movie in Movie)
                    {
                        <tr class="justify-content-center">
                            <td>@movie.Id</td>
                            <td>@movie.Title</td>
                            <td>@movie.Overview</td>
                            <td>@movie.Release_Date</td>
                            <td>@movie.Vote_Average</td>
                            <td>@movie.Vote_Count</td>
                            <td>
<img src=${@imgPath+@movie.Poster_Path} height="30" width="30" /></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        @if (!Movie.Any())
        {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>
        }
    </div>
</div>

@code {

    IEnumerable<Movie> Movie = new List<Movie>();
    string imgPath = "https://image.tmdb.org/t/p/w1280/";

    protected override async Task OnInitializedAsync()
    {
        var apiName = "3/discover/movie?sort_by=popularity.desc&api_key=457eee6dbcc86ae89d88514258f022e7&page=1";
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            Response responseData = JsonConvert.DeserializeObject<Response>(await httpResponse.Content.ReadAsStringAsync());
            Movie = responseData.Movies;
            StateHasChanged();
        }
    }

    public void SearchMovies()
    {
        var apiName = "3/discover/movie?sort_by=popularity.desc&api_key=457eee6dbcc86ae89d88514258f022e7&page=1";
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            Response responseData = JsonConvert.DeserializeObject<Response>(await httpResponse.Content.ReadAsStringAsync());
            Movie = responseData.Movies;
            StateHasChanged();
        }
    }

    public static IEnumerable<Movie> Search(IEnumerable<Movie> movies, string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return movies;

        var lowerCaseSearchTerm = searchTerm.Trim().ToLower();

        return movies.Where(p => p.Title.ToLower().Contains(lowerCaseSearchTerm));
    }
}