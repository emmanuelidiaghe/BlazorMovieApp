@page "/Movies"

@inject HttpClient client

@using Newtonsoft.Json
@using Data


<div class="">

    <div class="row justify-content-center" style="margin-bottom:50px">
        <h3 class="text-center">Check Out Your Favorite Movie!</h3>
    </div>

    <div class="">
        <section style="margin-bottom: 10px">
            <div class="search">
                <input @bind="searchValue"
                       @onkeydown="@Enter"
                       placeholder="Type to search"
                       type="text" />
                <button class="btn btn-primary" type="submit" @onclick="() => SearchMovies(searchValue)">SEARCH</button>
            </div>
        </section>
        <hr /><br /><br />
        <div class="row movies">
            @if (Movie != null)
            {
                @foreach (var movie in Movie)
                {
                    <div class="">
                        <div class="movie">
                            <h5>@movie.Title</h5>
                            <div>
                                <img width="200"
                                     alt="The movie titled: @movie.Title"
                                     src="https://image.tmdb.org/t/p/w1280/@(movie.Poster_Path)" />
                            </div>
                            <p>(@movie.Release_Date)</p>
                        </div>
                    </div>
                }
            }
        </div>
        @if (!Movie.Any())
        {
            <div class="justify-content-center">
                <h5>No records to show</h5>
            </div>
        }
    </div>
</div>

@code {

    IEnumerable<Movie> Movie = new List<Movie>();
    string imgPath = "https://image.tmdb.org/t/p/w1280/";
    string searchValue;
    string apiName = "3/discover/movie?sort_by=popularity.desc&api_key=457eee6dbcc86ae89d88514258f022e7&page=1";

    protected override async Task OnInitializedAsync()
    {
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            Response responseData = JsonConvert.DeserializeObject<Response>(await httpResponse.Content.ReadAsStringAsync());
            Movie = responseData.Movies;
            StateHasChanged();
        }
    }

    private async Task SearchMovies(string searchTerm)
    {
        var httpResponse = await client.GetAsync(apiName);

        if (httpResponse.IsSuccessStatusCode)
        {
            Response responseData = JsonConvert.DeserializeObject<Response>(await httpResponse.Content.ReadAsStringAsync());
            var RawMovie = responseData.Movies;
            Movie = Search(RawMovie, searchTerm).ToArray();
            StateHasChanged();
        }
    }

    private IEnumerable<Movie> Search(IEnumerable<Movie> movies, string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return movies;

        var lowerCaseSearchTerm = searchTerm.Trim().ToLower();

        return movies.Where(p => p.Title.ToLower().Contains(lowerCaseSearchTerm));
    }

    public async void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SearchMovies(searchValue);
        }
    }
}